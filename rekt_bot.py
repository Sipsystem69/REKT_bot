import os
import asyncio
import json
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from dotenv import load_dotenv
import websockets

# ---- –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ .env ----
load_dotenv()
BOT_TOKEN   = os.getenv("BOT_TOKEN")
CHAT_ID     = int(os.getenv("CHAT_ID"))
WEBHOOK_HOST = os.getenv("WEBHOOK_URL")  # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "https://your-app.onrender.com"
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL  = WEBHOOK_HOST + WEBHOOK_PATH

# –¶–µ–π –ø–æ—Ä—Ç Render –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î –≤ $PORT
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 5000))

EXCHANGE_WS = "wss://stream.bybit.com/realtime_public"

# ---- FSM —Å—Ç–∞–Ω–∏ ----
class Settings(StatesGroup):
    waiting_for_limit = State()

class ListSettings(StatesGroup):
    choosing_mode = State()

# ---- –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ----
limits = {}
list_modes = {}

# ---- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ----
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# ---- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ----
def main_menu():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üí≤ –õ–∏–º–∏—Ç ByBit", callback_data="set_limit"),
        InlineKeyboardButton("‚ö´Ô∏è –°–ø–∏—Å–æ–∫ ByBit", callback_data="set_list"),
    )
    return kb

def list_menu():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üü° –í—Å–µ —Ç–æ–∫–µ–Ω—ã",  callback_data="list_all"),
        InlineKeyboardButton("üü° –ë–µ–∑ —Ç–æ–ø 20", callback_data="list_no_top20"),
        InlineKeyboardButton("üü° –ë–µ–∑ —Ç–æ–ø 50", callback_data="list_no_top50"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞",     callback_data="list_cancel"),
    )
    return kb

# ---- –•–µ–Ω–¥–ª–µ—Ä–∏ ----
@dp.message_handler(commands=["start"])
async def cmd_start(msg: types.Message):
    limits[msg.chat.id]    = limits.get(msg.chat.id,    100_000.0)
    list_modes[msg.chat.id] = list_modes.get(msg.chat.id, "list_all")
    await msg.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Å–∫–∞–Ω–∏—Ä—É—é ByBit –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

@dp.callback_query_handler(lambda c: c.data == "set_limit")
async def callback_set_limit(cq: types.CallbackQuery):
    await cq.answer()
    await bot.send_message(cq.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π (USD):")
    await Settings.waiting_for_limit.set()

@dp.message_handler(state=Settings.waiting_for_limit, content_types=types.ContentTypes.TEXT)
async def process_limit(msg: types.Message, state: FSMContext):
    text = msg.text.replace(",", "").replace("$", "")
    try:
        val = float(text)
        limits[msg.chat.id] = val
        await msg.answer(f"‚úÖ –ü–æ—Ä–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –æ—Ç ${val:,.2f}", reply_markup=main_menu())
        await state.finish()
    except:
        await msg.answer("‚ùå –ù–µ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")

@dp.callback_query_handler(lambda c: c.data == "set_list")
async def callback_set_list(cq: types.CallbackQuery):
    await cq.answer()
    await bot.send_message(cq.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Å–ø–∏—Å–∫–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π:", reply_markup=list_menu())
    await ListSettings.choosing_mode.set()

@dp.callback_query_handler(lambda c: c.data.startswith("list_"), state=ListSettings.choosing_mode)
async def process_list_choice(cq: types.CallbackQuery, state: FSMContext):
    mode = cq.data
    await cq.answer()
    if mode == "list_cancel":
        await bot.send_message(cq.from_user.id, "‚ùå –û—Ç–º–µ–Ω–∞.", reply_markup=main_menu())
    else:
        desc = {
            "list_all":      "üü° –†–µ–∂–∏–º: –≤—Å–µ —Ç–æ–∫–µ–Ω—ã",
            "list_no_top20": "üü° –†–µ–∂–∏–º: –±–µ–∑ —Ç–æ–ø 20",
            "list_no_top50": "üü° –†–µ–∂–∏–º: –±–µ–∑ —Ç–æ–ø 50",
        }[mode]
        list_modes[cq.from_user.id] = mode
        await bot.send_message(cq.from_user.id, f"‚úÖ {desc}", reply_markup=main_menu())
    await state.finish()

# ---- WebSocket-—Å–ª—É—à–∞—Ç–µ–ª—å ----
async def liquidation_listener():
    async with websockets.connect(EXCHANGE_WS) as ws:
        await ws.send(json.dumps({"op": "subscribe", "args": ["liquidation"]}))
        while True:
            raw = await ws.recv()
            data = json.loads(raw)
            if data.get("topic")=="liquidation" and "data" in data:
                for it in data["data"]:
                    vol = float(it["qty"]) * float(it["price"])
                    if vol >= limits.get(CHAT_ID, 100_000.0):
                        txt = (
                            f"üí• –õ–∏–∫–≤–∏–¥–∞—Ü–∏—è {it['symbol']}\n"
                            f"‚Ä¢ –°—Ç–æ—Ä–æ–Ω–∞: {it['side']}\n"
                            f"‚Ä¢ –û–±—ä—ë–º: ${vol:,.2f}\n"
                            f"‚Ä¢ –¶–µ–Ω–∞: {it['price']}\n"
                            f"‚Ä¢ –í—Ä–µ–º—è: {it['time']}"
                        )
                        await bot.send_message(CHAT_ID, txt)
            await asyncio.sleep(0.01)

# ---- –£—Å—Ç–∞–Ω–æ–≤–∏–º webhook –Ω–∞ —Å—Ç–∞—Ä—Ç–∞–ø–µ ----
async def on_startup(dp):
    # –Ω–∞–∑–Ω–∞—á–∞–µ–º webhook
    await bot.set_webhook(WEBHOOK_URL)
    # –∑–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ–Ω–æ–≤–∏–π —Ç–∞—Å–∫
    dp.loop.create_task(liquidation_listener())

async def on_shutdown(dp):
    await bot.delete_webhook()

# ---- –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É ----
if __name__=="__main__":
    executor.start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        skip_updates=True,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
